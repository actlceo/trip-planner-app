generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Trip {
  id          String   @id @default(cuid())
  destination String
  start       DateTime
  end         DateTime
  travelers   Int      @default(1)
  interests   String
  createdAt   DateTime @default(now())
  days        Day[]
  userId      String?
  user        User?    @relation(fields: [userId], references: [id])
}

model Day {
  id     String   @id @default(cuid())
  date   DateTime
  trip   Trip     @relation(fields: [tripId], references: [id], onDelete: Cascade)
  tripId String
  items  Item[]
}

model Item {
  id     String   @id @default(cuid())
  title  String
  time   String?
  day    Day      @relation(fields: [dayId], references: [id], onDelete: Cascade)
  dayId  String
}

model Inquiry {
  id        String   @id @default(cuid())
  name      String
  email     String
  message   String
  createdAt DateTime @default(now())
}

// NextAuth models
model User {
  id            String   @id @default(cuid())
  name          String?
  email         String?  @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  trips         Trip[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?  @db.Text
  access_token      String?  @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?  @db.Text
  session_state     String?
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime
  @@unique([identifier, token])
}
